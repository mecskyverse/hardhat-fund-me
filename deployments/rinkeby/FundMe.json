{
  "address": "0x6df4173Be9FCC73C1700b6A0Da2690b39dbac757",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c629efbd64afa16cc02b8323474c0e5246c8fe03025fa07c9631ea08414b3d5",
  "receipt": {
    "to": null,
    "from": "0xAF8E45a64eDbbc5f4556d6de8CF5566cD0109D45",
    "contractAddress": "0x6df4173Be9FCC73C1700b6A0Da2690b39dbac757",
    "transactionIndex": 10,
    "gasUsed": "1065950",
    "logsBloom": "0x
    "blockHash": "0x365073098eb8fc171e9954d789e1b317ad71809f896cae55f43fbc406d20c937",
    "transactionHash": "0x4c629efbd64afa16cc02b8323474c0e5246c8fe03025fa07c9631ea08414b3d5",
    "logs": [],
    "blockNumber": 11309181,
    "cumulativeGasUsed": "5770368",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "28b808fb851d31748e5b560695d7784b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    fallback() external payable {\\n        //parameter received\\n    }\\n\\n    receive() external payable {\\n        //parameter received\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x05e07cb361bf2bc2c9c7f93b14b5e4bf719d3ba20404649f0b84611d12c00582\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xb6270c86e57bfed077355468d6a934f19843e652c7ce8ecec9cde9e72c6fbac9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200137638038062001376833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111e96200018d600039600081816102e3015281816104760152818161051c015281816106a7015261089d01526111e96000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461013d5780639e87a5cd14610168578063b60d428814610193578063be2693f01461019d578063d7b4750c146101b457610091565b80630343fb25146100935780630d8e6e2c146100d05780633ccfd60b146100fb5780636b69a5921461011257610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610b60565b6101f1565b6040516100c79190610ba6565b60405180910390f35b3480156100dc57600080fd5b506100e561023a565b6040516100f29190610ba6565b60405180910390f35b34801561010757600080fd5b506101106102e1565b005b34801561011e57600080fd5b5061012761050b565b6040516101349190610ba6565b60405180910390f35b34801561014957600080fd5b50610152610518565b60405161015f9190610bd0565b60405180910390f35b34801561017457600080fd5b5061017d610540565b60405161018a9190610c4a565b60405180910390f35b61019b61056a565b005b3480156101a957600080fd5b506101b26106a5565b005b3480156101c057600080fd5b506101db60048036038101906101d69190610c91565b610933565b6040516101e89190610bd0565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610cd3565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610366576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041157600080828154811061038b5761038a610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040990610d5e565b915050610369565b50600067ffffffffffffffff81111561042d5761042c610da7565b5b60405190808252806020026020018201604052801561045b5781602001602082028036833780820191505090505b5060009080519060200190610471929190610a56565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b890610e07565b60006040518083038185875af1925050503d80600081146104f5576040519150601f19603f3d011682016040523d82523d6000602084013e6104fa565b606091505b505090508061050857600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105a9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097a90919063ffffffff16565b10156105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190610e79565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106399190610e99565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107ad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610763575b5050505050905060005b81518110156108385760008282815181106107d5576107d4610d00565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083090610d5e565b9150506107b7565b50600067ffffffffffffffff81111561085457610853610da7565b5b6040519080825280602002602001820160405280156108825781602001602082028036833780820191505090505b5060009080519060200190610898929190610a56565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108df90610e07565b60006040518083038185875af1925050503d806000811461091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b505090508061092f57600080fd5b5050565b600080828154811061094857610947610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610986836109b6565b90506000670de0b6b3a7640000858361099f9190610eef565b6109a99190610f78565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611021565b5050509150506402540be40081610a4e919061109c565b915050919050565b828054828255906000526020600020908101928215610acf579160200282015b82811115610ace5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a76565b5b509050610adc9190610ae0565b5090565b5b80821115610af9576000816000905550600101610ae1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2d82610b02565b9050919050565b610b3d81610b22565b8114610b4857600080fd5b50565b600081359050610b5a81610b34565b92915050565b600060208284031215610b7657610b75610afd565b5b6000610b8484828501610b4b565b91505092915050565b6000819050919050565b610ba081610b8d565b82525050565b6000602082019050610bbb6000830184610b97565b92915050565b610bca81610b22565b82525050565b6000602082019050610be56000830184610bc1565b92915050565b6000819050919050565b6000610c10610c0b610c0684610b02565b610beb565b610b02565b9050919050565b6000610c2282610bf5565b9050919050565b6000610c3482610c17565b9050919050565b610c4481610c29565b82525050565b6000602082019050610c5f6000830184610c3b565b92915050565b610c6e81610b8d565b8114610c7957600080fd5b50565b600081359050610c8b81610c65565b92915050565b600060208284031215610ca757610ca6610afd565b5b6000610cb584828501610c7c565b91505092915050565b600081519050610ccd81610c65565b92915050565b600060208284031215610ce957610ce8610afd565b5b6000610cf784828501610cbe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6982610b8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9c57610d9b610d2f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df1600083610dd6565b9150610dfc82610de1565b600082019050919050565b6000610e1282610de4565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e63601b83610e1c565b9150610e6e82610e2d565b602082019050919050565b60006020820190508181036000830152610e9281610e56565b9050919050565b6000610ea482610b8d565b9150610eaf83610b8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ee457610ee3610d2f565b5b828201905092915050565b6000610efa82610b8d565b9150610f0583610b8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f3e57610f3d610d2f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8382610b8d565b9150610f8e83610b8d565b925082610f9e57610f9d610f49565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fc881610fa9565b8114610fd357600080fd5b50565b600081519050610fe581610fbf565b92915050565b6000819050919050565b610ffe81610feb565b811461100957600080fd5b50565b60008151905061101b81610ff5565b92915050565b600080600080600060a0868803121561103d5761103c610afd565b5b600061104b88828901610fd6565b955050602061105c8882890161100c565b945050604061106d88828901610cbe565b935050606061107e88828901610cbe565b925050608061108f88828901610fd6565b9150509295509295909350565b60006110a782610feb565b91506110b283610feb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110f1576110f0610d2f565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112e5761112d610d2f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116b5761116a610d2f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111a8576111a7610d2f565b5b82820290509291505056fea2646970667358221220cbf6b3deba03ba43ca2b3fa4464c27f20322828649bf7be82146ce6148cb4b6464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461013d5780639e87a5cd14610168578063b60d428814610193578063be2693f01461019d578063d7b4750c146101b457610091565b80630343fb25146100935780630d8e6e2c146100d05780633ccfd60b146100fb5780636b69a5921461011257610091565b3661009157005b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610b60565b6101f1565b6040516100c79190610ba6565b60405180910390f35b3480156100dc57600080fd5b506100e561023a565b6040516100f29190610ba6565b60405180910390f35b34801561010757600080fd5b506101106102e1565b005b34801561011e57600080fd5b5061012761050b565b6040516101349190610ba6565b60405180910390f35b34801561014957600080fd5b50610152610518565b60405161015f9190610bd0565b60405180910390f35b34801561017457600080fd5b5061017d610540565b60405161018a9190610c4a565b60405180910390f35b61019b61056a565b005b3480156101a957600080fd5b506101b26106a5565b005b3480156101c057600080fd5b506101db60048036038101906101d69190610c91565b610933565b6040516101e89190610bd0565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dc9190610cd3565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610366576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041157600080828154811061038b5761038a610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040990610d5e565b915050610369565b50600067ffffffffffffffff81111561042d5761042c610da7565b5b60405190808252806020026020018201604052801561045b5781602001602082028036833780820191505090505b5060009080519060200190610471929190610a56565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104b890610e07565b60006040518083038185875af1925050503d80600081146104f5576040519150601f19603f3d011682016040523d82523d6000602084013e6104fa565b606091505b505090508061050857600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105a9600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097a90919063ffffffff16565b10156105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190610e79565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106399190610e99565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072a576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107ad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610763575b5050505050905060005b81518110156108385760008282815181106107d5576107d4610d00565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083090610d5e565b9150506107b7565b50600067ffffffffffffffff81111561085457610853610da7565b5b6040519080825280602002602001820160405280156108825781602001602082028036833780820191505090505b5060009080519060200190610898929190610a56565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108df90610e07565b60006040518083038185875af1925050503d806000811461091c576040519150601f19603f3d011682016040523d82523d6000602084013e610921565b606091505b505090508061092f57600080fd5b5050565b600080828154811061094857610947610d00565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610986836109b6565b90506000670de0b6b3a7640000858361099f9190610eef565b6109a99190610f78565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109ff57600080fd5b505afa158015610a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a379190611021565b5050509150506402540be40081610a4e919061109c565b915050919050565b828054828255906000526020600020908101928215610acf579160200282015b82811115610ace5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a76565b5b509050610adc9190610ae0565b5090565b5b80821115610af9576000816000905550600101610ae1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2d82610b02565b9050919050565b610b3d81610b22565b8114610b4857600080fd5b50565b600081359050610b5a81610b34565b92915050565b600060208284031215610b7657610b75610afd565b5b6000610b8484828501610b4b565b91505092915050565b6000819050919050565b610ba081610b8d565b82525050565b6000602082019050610bbb6000830184610b97565b92915050565b610bca81610b22565b82525050565b6000602082019050610be56000830184610bc1565b92915050565b6000819050919050565b6000610c10610c0b610c0684610b02565b610beb565b610b02565b9050919050565b6000610c2282610bf5565b9050919050565b6000610c3482610c17565b9050919050565b610c4481610c29565b82525050565b6000602082019050610c5f6000830184610c3b565b92915050565b610c6e81610b8d565b8114610c7957600080fd5b50565b600081359050610c8b81610c65565b92915050565b600060208284031215610ca757610ca6610afd565b5b6000610cb584828501610c7c565b91505092915050565b600081519050610ccd81610c65565b92915050565b600060208284031215610ce957610ce8610afd565b5b6000610cf784828501610cbe565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6982610b8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9c57610d9b610d2f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610df1600083610dd6565b9150610dfc82610de1565b600082019050919050565b6000610e1282610de4565b9150819050919050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e63601b83610e1c565b9150610e6e82610e2d565b602082019050919050565b60006020820190508181036000830152610e9281610e56565b9050919050565b6000610ea482610b8d565b9150610eaf83610b8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ee457610ee3610d2f565b5b828201905092915050565b6000610efa82610b8d565b9150610f0583610b8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f3e57610f3d610d2f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8382610b8d565b9150610f8e83610b8d565b925082610f9e57610f9d610f49565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fc881610fa9565b8114610fd357600080fd5b50565b600081519050610fe581610fbf565b92915050565b6000819050919050565b610ffe81610feb565b811461100957600080fd5b50565b60008151905061101b81610ff5565b92915050565b600080600080600060a0868803121561103d5761103c610afd565b5b600061104b88828901610fd6565b955050602061105c8882890161100c565b945050604061106d88828901610cbe565b935050606061107e88828901610cbe565b925050608061108f88828901610fd6565b9150509295509295909350565b60006110a782610feb565b91506110b283610feb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110f1576110f0610d2f565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561112e5761112d610d2f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561116b5761116a610d2f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111a8576111a7610d2f565b5b82820290509291505056fea2646970667358221220cbf6b3deba03ba43ca2b3fa4464c27f20322828649bf7be82146ce6148cb4b6464736f6c63430008080033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}